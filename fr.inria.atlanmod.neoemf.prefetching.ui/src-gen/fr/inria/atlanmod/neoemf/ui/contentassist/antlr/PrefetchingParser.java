/*
* generated by Xtext
*/
package fr.inria.atlanmod.neoemf.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import fr.inria.atlanmod.neoemf.services.PrefetchingGrammarAccess;

public class PrefetchingParser extends AbstractContentAssistParser {
	
	@Inject
	private PrefetchingGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected fr.inria.atlanmod.neoemf.ui.contentassist.antlr.internal.InternalPrefetchingParser createParser() {
		fr.inria.atlanmod.neoemf.ui.contentassist.antlr.internal.InternalPrefetchingParser result = new fr.inria.atlanmod.neoemf.ui.contentassist.antlr.internal.InternalPrefetchingParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getPlanAccess().getRulesAlternatives_5_0(), "rule__Plan__RulesAlternatives_5_0");
					put(grammarAccess.getPatternExp2Access().getAlternatives_1_1(), "rule__PatternExp2__Alternatives_1_1");
					put(grammarAccess.getCacheTypeAccess().getAlternatives(), "rule__CacheType__Alternatives");
					put(grammarAccess.getRefTypeAccess().getAlternatives(), "rule__RefType__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getMetamodelImportAccess().getGroup(), "rule__MetamodelImport__Group__0");
					put(grammarAccess.getCacheAccess().getGroup(), "rule__Cache__Group__0");
					put(grammarAccess.getCachePropertiesAccess().getGroup(), "rule__CacheProperties__Group__0");
					put(grammarAccess.getCachePropertiesAccess().getGroup_3(), "rule__CacheProperties__Group_3__0");
					put(grammarAccess.getPlanAccess().getGroup(), "rule__Plan__Group__0");
					put(grammarAccess.getAfterClauseAccess().getGroup(), "rule__AfterClause__Group__0");
					put(grammarAccess.getStartingRuleAccess().getGroup(), "rule__StartingRule__Group__0");
					put(grammarAccess.getAccessRuleAccess().getGroup(), "rule__AccessRule__Group__0");
					put(grammarAccess.getAccessRuleAccess().getGroup_7(), "rule__AccessRule__Group_7__0");
					put(grammarAccess.getSourcePatternAccess().getGroup(), "rule__SourcePattern__Group__0");
					put(grammarAccess.getFilterPatternAccess().getGroup(), "rule__FilterPattern__Group__0");
					put(grammarAccess.getPatternExpAccess().getGroup(), "rule__PatternExp__Group__0");
					put(grammarAccess.getPatternExpAccess().getGroup_1(), "rule__PatternExp__Group_1__0");
					put(grammarAccess.getPatternExp2Access().getGroup(), "rule__PatternExp2__Group__0");
					put(grammarAccess.getPatternExp2Access().getGroup_1(), "rule__PatternExp2__Group_1__0");
					put(grammarAccess.getPatternExp2Access().getGroup_1_1_0(), "rule__PatternExp2__Group_1_1_0__0");
					put(grammarAccess.getPatternExp2Access().getGroup_1_1_1(), "rule__PatternExp2__Group_1_1_1__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getModelAccess().getMetamodelAssignment_0(), "rule__Model__MetamodelAssignment_0");
					put(grammarAccess.getModelAccess().getPlansAssignment_1(), "rule__Model__PlansAssignment_1");
					put(grammarAccess.getMetamodelImportAccess().getNsURIAssignment_1(), "rule__MetamodelImport__NsURIAssignment_1");
					put(grammarAccess.getCacheAccess().getTypeAssignment_1(), "rule__Cache__TypeAssignment_1");
					put(grammarAccess.getCacheAccess().getPropertiesAssignment_2(), "rule__Cache__PropertiesAssignment_2");
					put(grammarAccess.getCachePropertiesAccess().getSizeAssignment_2(), "rule__CacheProperties__SizeAssignment_2");
					put(grammarAccess.getCachePropertiesAccess().getChunkAssignment_3_1(), "rule__CacheProperties__ChunkAssignment_3_1");
					put(grammarAccess.getPlanAccess().getNameAssignment_1(), "rule__Plan__NameAssignment_1");
					put(grammarAccess.getPlanAccess().getAfterAssignment_2(), "rule__Plan__AfterAssignment_2");
					put(grammarAccess.getPlanAccess().getCacheAssignment_4(), "rule__Plan__CacheAssignment_4");
					put(grammarAccess.getPlanAccess().getRulesAssignment_5(), "rule__Plan__RulesAssignment_5");
					put(grammarAccess.getAfterClauseAccess().getPlanAssignment_1(), "rule__AfterClause__PlanAssignment_1");
					put(grammarAccess.getStartingRuleAccess().getNameAssignment_1(), "rule__StartingRule__NameAssignment_1");
					put(grammarAccess.getStartingRuleAccess().getTargetPatternAssignment_5(), "rule__StartingRule__TargetPatternAssignment_5");
					put(grammarAccess.getAccessRuleAccess().getNameAssignment_1(), "rule__AccessRule__NameAssignment_1");
					put(grammarAccess.getAccessRuleAccess().getSourcePatternAssignment_4(), "rule__AccessRule__SourcePatternAssignment_4");
					put(grammarAccess.getAccessRuleAccess().getTargetPatternAssignment_6(), "rule__AccessRule__TargetPatternAssignment_6");
					put(grammarAccess.getAccessRuleAccess().getRemoveTypeAssignment_7_2(), "rule__AccessRule__RemoveTypeAssignment_7_2");
					put(grammarAccess.getSourcePatternAccess().getPatternAssignment_1(), "rule__SourcePattern__PatternAssignment_1");
					put(grammarAccess.getSourcePatternAccess().getFilterAssignment_2(), "rule__SourcePattern__FilterAssignment_2");
					put(grammarAccess.getFilterPatternAccess().getStringPatternAssignment_1(), "rule__FilterPattern__StringPatternAssignment_1");
					put(grammarAccess.getTargetPatternAccess().getPatternAssignment(), "rule__TargetPattern__PatternAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			fr.inria.atlanmod.neoemf.ui.contentassist.antlr.internal.InternalPrefetchingParser typedParser = (fr.inria.atlanmod.neoemf.ui.contentassist.antlr.internal.InternalPrefetchingParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public PrefetchingGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(PrefetchingGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
