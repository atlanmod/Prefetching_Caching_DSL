grammar fr.inria.atlanmod.neoemf.Prefetching //with org.eclipse.ocl.examples.xtext.completeocl.CompleteOCL
with org.eclipse.xtext.common.Terminals
import "http://www.eclipse.org/emf/2002/Ecore"
import "http://www.inria.fr/atlanmod/neoemf/Prefetching"

Model:
	metamodel=MetamodelImport
	plans+=Plan*
;

MetamodelImport:
	'import' nsURI=STRING
;

Cache:
	'use cache' type=CacheType (properties=CacheProperties)? 
;

enum CacheType:
	LRU='LRU' |
	PREDICTIVE='Predictive' 
; 
 
CacheProperties:
	'[' 'size'size=INT ('chunk'chunk=INT)? ']'
;

enum RefType:
	STRONG='strong' |
	SOFT='soft' |
	WEAK='weak'
;

Plan:
	'plan' name=ID (after=AfterClause)? '{'
		cache=Cache
		rules+=(StartingRule | AccessRule)*
	'}'
;

AfterClause:
	'after' plan=[Plan]
;

StartingRule returns StartingRule:
	'rule' name=ID ':' 'on starting' 'fetch' targetPattern=TargetPattern
;

AccessRule:
	'rule' name=ID ':' 'on access' (sourcePattern=SourcePattern)? 'fetch' targetPattern=TargetPattern 
		('remove' 'type'removeType=ClassPatternExp)?
;

SourcePattern:
	'type' pattern=ClassPatternExp (filter=FilterPattern)?
;

FilterPattern:
	'['stringPattern=STRING']'
;

TargetPattern:
	pattern=(PatternExp2)
;

PatternExp:
	ID ('.' ID('*')?)*
;

PatternExp2:
	ID('.' (ID('*') | ID ('()')?))*
;

ClassPatternExp:
	ID
;

QualifiedName:
	ID ( '.' ID)*
;