grammar fr.inria.atlanmod.neoemf.Prefetching with org.eclipse.xtext.common.Terminals
import "http://www.eclipse.org/emf/2002/Ecore"
import "http://www.inria.fr/atlanmod/neoemf/Prefetching"

Model:
	metamodel=MetamodelImport
	cache=Cache
	plans+=Plan*
;

MetamodelImport:
	'import' nsURI=STRING
;

Cache:
	'use cache' type=CacheType (properties=CacheProperties)?
;

enum CacheType:
	LRU='LRU' |
	PREDICTIVE='Predictive'
;

CacheProperties:
	'[' 'size'size=INT ']'
;

enum RefType:
	STRONG='strong' |
	SOFT='soft' |
	WEAK='weak'
;

Plan:
	'plan' name=ID (after=AfterClause)? '{'
		rules+=(StartingRule | LoadingRule)*
	'}'
;

AfterClause:
	'after' plan=[Plan]
;

StartingRule returns PrefetchingRule:
	'on starting' 'fetch' targetPattern=TargetPattern (probability=INT'%')?
	('{'
		subRules+=LoadingRule*
	'}')
;

LoadingRule returns PrefetchingRule:
	'on loading' (sourcePattern=SourcePattern)? 'fetch' targetPattern=TargetPattern (probability=INT'%')?
	('{'
		subRules+=LoadingRule*
	'}')?
;

SourcePattern:
	pattern=PatternExp (filter=FilterPattern)?
;

FilterPattern:
	'['stringPattern=STRING']'
;

TargetPattern:
	pattern=PatternExp (filter=FilterPattern)?
;

enum Moment:
	ON_STARTING='on starting' |
	ON_LOADING='on loading'
;

PatternExp:
	ID ('.' ID)*
;

QualifiedName:
	ID ( '.' ID)*
;