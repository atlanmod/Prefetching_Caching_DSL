/*
* generated by Xtext
*/
package fr.inria.atlanmod.neoemf.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class PrefetchingGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCacheAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCacheCacheParserRuleCall_0_0 = (RuleCall)cCacheAssignment_0.eContents().get(0);
		private final Assignment cPlansAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPlansPlanParserRuleCall_1_0 = (RuleCall)cPlansAssignment_1.eContents().get(0);
		
		//Model:
		//	cache=Cache plans+=Plan*;
		public ParserRule getRule() { return rule; }

		//cache=Cache plans+=Plan*
		public Group getGroup() { return cGroup; }

		//cache=Cache
		public Assignment getCacheAssignment_0() { return cCacheAssignment_0; }

		//Cache
		public RuleCall getCacheCacheParserRuleCall_0_0() { return cCacheCacheParserRuleCall_0_0; }

		//plans+=Plan*
		public Assignment getPlansAssignment_1() { return cPlansAssignment_1; }

		//Plan
		public RuleCall getPlansPlanParserRuleCall_1_0() { return cPlansPlanParserRuleCall_1_0; }
	}

	public class CacheElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Cache");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUseCacheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeCacheTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cPropertiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertiesCachePropertiesParserRuleCall_2_0 = (RuleCall)cPropertiesAssignment_2.eContents().get(0);
		
		//Cache:
		//	"use cache" type=CacheType properties=CacheProperties?;
		public ParserRule getRule() { return rule; }

		//"use cache" type=CacheType properties=CacheProperties?
		public Group getGroup() { return cGroup; }

		//"use cache"
		public Keyword getUseCacheKeyword_0() { return cUseCacheKeyword_0; }

		//type=CacheType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//CacheType
		public RuleCall getTypeCacheTypeEnumRuleCall_1_0() { return cTypeCacheTypeEnumRuleCall_1_0; }

		//properties=CacheProperties?
		public Assignment getPropertiesAssignment_2() { return cPropertiesAssignment_2; }

		//CacheProperties
		public RuleCall getPropertiesCachePropertiesParserRuleCall_2_0() { return cPropertiesCachePropertiesParserRuleCall_2_0; }
	}

	public class CachePropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CacheProperties");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRefTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRefTypeRefTypeEnumRuleCall_2_0 = (RuleCall)cRefTypeAssignment_2.eContents().get(0);
		private final Keyword cSizeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSizeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSizeINTTerminalRuleCall_4_0 = (RuleCall)cSizeAssignment_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//CacheProperties:
		//	"[" "type" refType=RefType "size" size=INT "]";
		public ParserRule getRule() { return rule; }

		//"[" "type" refType=RefType "size" size=INT "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//"type"
		public Keyword getTypeKeyword_1() { return cTypeKeyword_1; }

		//refType=RefType
		public Assignment getRefTypeAssignment_2() { return cRefTypeAssignment_2; }

		//RefType
		public RuleCall getRefTypeRefTypeEnumRuleCall_2_0() { return cRefTypeRefTypeEnumRuleCall_2_0; }

		//"size"
		public Keyword getSizeKeyword_3() { return cSizeKeyword_3; }

		//size=INT
		public Assignment getSizeAssignment_4() { return cSizeAssignment_4; }

		//INT
		public RuleCall getSizeINTTerminalRuleCall_4_0() { return cSizeINTTerminalRuleCall_4_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}

	public class PlanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Plan");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlanKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPlanIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPlanIdIDTerminalRuleCall_1_0 = (RuleCall)cPlanIdAssignment_1.eContents().get(0);
		private final Assignment cAfterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAfterAfterRuleParserRuleCall_2_0 = (RuleCall)cAfterAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRulesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRulesPrefetchingRuleParserRuleCall_4_0 = (RuleCall)cRulesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Plan:
		//	"plan" planId=ID after=AfterRule? "{" rules+=PrefetchingRule* "}";
		public ParserRule getRule() { return rule; }

		//"plan" planId=ID after=AfterRule? "{" rules+=PrefetchingRule* "}"
		public Group getGroup() { return cGroup; }

		//"plan"
		public Keyword getPlanKeyword_0() { return cPlanKeyword_0; }

		//planId=ID
		public Assignment getPlanIdAssignment_1() { return cPlanIdAssignment_1; }

		//ID
		public RuleCall getPlanIdIDTerminalRuleCall_1_0() { return cPlanIdIDTerminalRuleCall_1_0; }

		//after=AfterRule?
		public Assignment getAfterAssignment_2() { return cAfterAssignment_2; }

		//AfterRule
		public RuleCall getAfterAfterRuleParserRuleCall_2_0() { return cAfterAfterRuleParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//rules+=PrefetchingRule*
		public Assignment getRulesAssignment_4() { return cRulesAssignment_4; }

		//PrefetchingRule
		public RuleCall getRulesPrefetchingRuleParserRuleCall_4_0() { return cRulesPrefetchingRuleParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class AfterRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AfterRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAfterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPlanIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPlanIdPlanCrossReference_1_0 = (CrossReference)cPlanIdAssignment_1.eContents().get(0);
		private final RuleCall cPlanIdPlanIDTerminalRuleCall_1_0_1 = (RuleCall)cPlanIdPlanCrossReference_1_0.eContents().get(1);
		
		//AfterRule:
		//	"after" planId=[Plan];
		public ParserRule getRule() { return rule; }

		//"after" planId=[Plan]
		public Group getGroup() { return cGroup; }

		//"after"
		public Keyword getAfterKeyword_0() { return cAfterKeyword_0; }

		//planId=[Plan]
		public Assignment getPlanIdAssignment_1() { return cPlanIdAssignment_1; }

		//[Plan]
		public CrossReference getPlanIdPlanCrossReference_1_0() { return cPlanIdPlanCrossReference_1_0; }

		//ID
		public RuleCall getPlanIdPlanIDTerminalRuleCall_1_0_1() { return cPlanIdPlanIDTerminalRuleCall_1_0_1; }
	}

	public class PrefetchingRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrefetchingRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMomentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMomentMomentEnumRuleCall_0_0 = (RuleCall)cMomentAssignment_0.eContents().get(0);
		private final Assignment cSourcePatternAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSourcePatternSourcePatternParserRuleCall_1_0 = (RuleCall)cSourcePatternAssignment_1.eContents().get(0);
		private final Keyword cFetchKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetPatternAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTargetPatternTargetPatternParserRuleCall_3_0 = (RuleCall)cTargetPatternAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cProbabilityAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cProbabilityINTTerminalRuleCall_4_0_0 = (RuleCall)cProbabilityAssignment_4_0.eContents().get(0);
		private final Keyword cPercentSignKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cSubRulesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cSubRulesPrefetchingRuleParserRuleCall_5_1_0 = (RuleCall)cSubRulesAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		//PrefetchingRule:
		//	moment=Moment sourcePattern=SourcePattern? "fetch" targetPattern=TargetPattern (probability=INT "%")? ("{"
		//	subRules+=PrefetchingRule* "}")?;
		public ParserRule getRule() { return rule; }

		//moment=Moment sourcePattern=SourcePattern? "fetch" targetPattern=TargetPattern (probability=INT "%")? ("{"
		//subRules+=PrefetchingRule* "}")?
		public Group getGroup() { return cGroup; }

		//moment=Moment
		public Assignment getMomentAssignment_0() { return cMomentAssignment_0; }

		//Moment
		public RuleCall getMomentMomentEnumRuleCall_0_0() { return cMomentMomentEnumRuleCall_0_0; }

		//sourcePattern=SourcePattern?
		public Assignment getSourcePatternAssignment_1() { return cSourcePatternAssignment_1; }

		//SourcePattern
		public RuleCall getSourcePatternSourcePatternParserRuleCall_1_0() { return cSourcePatternSourcePatternParserRuleCall_1_0; }

		//"fetch"
		public Keyword getFetchKeyword_2() { return cFetchKeyword_2; }

		//targetPattern=TargetPattern
		public Assignment getTargetPatternAssignment_3() { return cTargetPatternAssignment_3; }

		//TargetPattern
		public RuleCall getTargetPatternTargetPatternParserRuleCall_3_0() { return cTargetPatternTargetPatternParserRuleCall_3_0; }

		//(probability=INT "%")?
		public Group getGroup_4() { return cGroup_4; }

		//probability=INT
		public Assignment getProbabilityAssignment_4_0() { return cProbabilityAssignment_4_0; }

		//INT
		public RuleCall getProbabilityINTTerminalRuleCall_4_0_0() { return cProbabilityINTTerminalRuleCall_4_0_0; }

		//"%"
		public Keyword getPercentSignKeyword_4_1() { return cPercentSignKeyword_4_1; }

		//("{" subRules+=PrefetchingRule* "}")?
		public Group getGroup_5() { return cGroup_5; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_0() { return cLeftCurlyBracketKeyword_5_0; }

		//subRules+=PrefetchingRule*
		public Assignment getSubRulesAssignment_5_1() { return cSubRulesAssignment_5_1; }

		//PrefetchingRule
		public RuleCall getSubRulesPrefetchingRuleParserRuleCall_5_1_0() { return cSubRulesPrefetchingRuleParserRuleCall_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_2() { return cRightCurlyBracketKeyword_5_2; }
	}

	public class SourcePatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SourcePattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPatternAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPatternQualifiedNameParserRuleCall_0_0 = (RuleCall)cPatternAssignment_0.eContents().get(0);
		private final Assignment cFilterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFilterFilterPatternParserRuleCall_1_0 = (RuleCall)cFilterAssignment_1.eContents().get(0);
		
		//SourcePattern:
		//	pattern=QualifiedName filter=FilterPattern?;
		public ParserRule getRule() { return rule; }

		//pattern=QualifiedName filter=FilterPattern?
		public Group getGroup() { return cGroup; }

		//pattern=QualifiedName
		public Assignment getPatternAssignment_0() { return cPatternAssignment_0; }

		//QualifiedName
		public RuleCall getPatternQualifiedNameParserRuleCall_0_0() { return cPatternQualifiedNameParserRuleCall_0_0; }

		//filter=FilterPattern?
		public Assignment getFilterAssignment_1() { return cFilterAssignment_1; }

		//FilterPattern
		public RuleCall getFilterFilterPatternParserRuleCall_1_0() { return cFilterFilterPatternParserRuleCall_1_0; }
	}

	public class FilterPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FilterPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStringPatternAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStringPatternSTRINGTerminalRuleCall_1_0 = (RuleCall)cStringPatternAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//FilterPattern:
		//	"[" stringPattern=STRING "]";
		public ParserRule getRule() { return rule; }

		//"[" stringPattern=STRING "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//stringPattern=STRING
		public Assignment getStringPatternAssignment_1() { return cStringPatternAssignment_1; }

		//STRING
		public RuleCall getStringPatternSTRINGTerminalRuleCall_1_0() { return cStringPatternSTRINGTerminalRuleCall_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class TargetPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TargetPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPatternAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPatternQualifiedNameParserRuleCall_0_0 = (RuleCall)cPatternAssignment_0.eContents().get(0);
		private final Assignment cFilterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFilterFilterPatternParserRuleCall_1_0 = (RuleCall)cFilterAssignment_1.eContents().get(0);
		
		//TargetPattern:
		//	pattern=QualifiedName filter=FilterPattern?;
		public ParserRule getRule() { return rule; }

		//pattern=QualifiedName filter=FilterPattern?
		public Group getGroup() { return cGroup; }

		//pattern=QualifiedName
		public Assignment getPatternAssignment_0() { return cPatternAssignment_0; }

		//QualifiedName
		public RuleCall getPatternQualifiedNameParserRuleCall_0_0() { return cPatternQualifiedNameParserRuleCall_0_0; }

		//filter=FilterPattern?
		public Assignment getFilterAssignment_1() { return cFilterAssignment_1; }

		//FilterPattern
		public RuleCall getFilterFilterPatternParserRuleCall_1_0() { return cFilterFilterPatternParserRuleCall_1_0; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	public class CacheTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "CacheType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLRUEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLRULRUKeyword_0_0 = (Keyword)cLRUEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPREDICTIVEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPREDICTIVEPREDICTIVEKeyword_1_0 = (Keyword)cPREDICTIVEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum CacheType:
		//	LRU | PREDICTIVE;
		public EnumRule getRule() { return rule; }

		//LRU | PREDICTIVE
		public Alternatives getAlternatives() { return cAlternatives; }

		//LRU
		public EnumLiteralDeclaration getLRUEnumLiteralDeclaration_0() { return cLRUEnumLiteralDeclaration_0; }

		//"LRU"
		public Keyword getLRULRUKeyword_0_0() { return cLRULRUKeyword_0_0; }

		//PREDICTIVE
		public EnumLiteralDeclaration getPREDICTIVEEnumLiteralDeclaration_1() { return cPREDICTIVEEnumLiteralDeclaration_1; }

		//"PREDICTIVE"
		public Keyword getPREDICTIVEPREDICTIVEKeyword_1_0() { return cPREDICTIVEPREDICTIVEKeyword_1_0; }
	}

	public class RefTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "RefType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSTRONGEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSTRONGStrongKeyword_0_0 = (Keyword)cSTRONGEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSOFTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSOFTSoftKeyword_1_0 = (Keyword)cSOFTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cWEAKEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cWEAKWeakKeyword_2_0 = (Keyword)cWEAKEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum RefType:
		//	STRONG="strong" | SOFT="soft" | WEAK="weak";
		public EnumRule getRule() { return rule; }

		//STRONG="strong" | SOFT="soft" | WEAK="weak"
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRONG="strong"
		public EnumLiteralDeclaration getSTRONGEnumLiteralDeclaration_0() { return cSTRONGEnumLiteralDeclaration_0; }

		//"strong"
		public Keyword getSTRONGStrongKeyword_0_0() { return cSTRONGStrongKeyword_0_0; }

		//SOFT="soft"
		public EnumLiteralDeclaration getSOFTEnumLiteralDeclaration_1() { return cSOFTEnumLiteralDeclaration_1; }

		//"soft"
		public Keyword getSOFTSoftKeyword_1_0() { return cSOFTSoftKeyword_1_0; }

		//WEAK="weak"
		public EnumLiteralDeclaration getWEAKEnumLiteralDeclaration_2() { return cWEAKEnumLiteralDeclaration_2; }

		//"weak"
		public Keyword getWEAKWeakKeyword_2_0() { return cWEAKWeakKeyword_2_0; }
	}

	public class MomentElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Moment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cON_STARTINGEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cON_STARTINGOnStartingKeyword_0_0 = (Keyword)cON_STARTINGEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cON_LOADINGEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cON_LOADINGOnLoadingKeyword_1_0 = (Keyword)cON_LOADINGEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Moment:
		//	ON_STARTING="on starting" | ON_LOADING="on loading";
		public EnumRule getRule() { return rule; }

		//ON_STARTING="on starting" | ON_LOADING="on loading"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ON_STARTING="on starting"
		public EnumLiteralDeclaration getON_STARTINGEnumLiteralDeclaration_0() { return cON_STARTINGEnumLiteralDeclaration_0; }

		//"on starting"
		public Keyword getON_STARTINGOnStartingKeyword_0_0() { return cON_STARTINGOnStartingKeyword_0_0; }

		//ON_LOADING="on loading"
		public EnumLiteralDeclaration getON_LOADINGEnumLiteralDeclaration_1() { return cON_LOADINGEnumLiteralDeclaration_1; }

		//"on loading"
		public Keyword getON_LOADINGOnLoadingKeyword_1_0() { return cON_LOADINGOnLoadingKeyword_1_0; }
	}
	
	private ModelElements pModel;
	private CacheElements pCache;
	private CacheTypeElements unknownRuleCacheType;
	private CachePropertiesElements pCacheProperties;
	private RefTypeElements unknownRuleRefType;
	private PlanElements pPlan;
	private AfterRuleElements pAfterRule;
	private PrefetchingRuleElements pPrefetchingRule;
	private SourcePatternElements pSourcePattern;
	private FilterPatternElements pFilterPattern;
	private TargetPatternElements pTargetPattern;
	private MomentElements unknownRuleMoment;
	private QualifiedNameElements pQualifiedName;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public PrefetchingGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.inria.atlanmod.neoemf.Prefetching".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	cache=Cache plans+=Plan*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Cache:
	//	"use cache" type=CacheType properties=CacheProperties?;
	public CacheElements getCacheAccess() {
		return (pCache != null) ? pCache : (pCache = new CacheElements());
	}
	
	public ParserRule getCacheRule() {
		return getCacheAccess().getRule();
	}

	//enum CacheType:
	//	LRU | PREDICTIVE;
	public CacheTypeElements getCacheTypeAccess() {
		return (unknownRuleCacheType != null) ? unknownRuleCacheType : (unknownRuleCacheType = new CacheTypeElements());
	}
	
	public EnumRule getCacheTypeRule() {
		return getCacheTypeAccess().getRule();
	}

	//CacheProperties:
	//	"[" "type" refType=RefType "size" size=INT "]";
	public CachePropertiesElements getCachePropertiesAccess() {
		return (pCacheProperties != null) ? pCacheProperties : (pCacheProperties = new CachePropertiesElements());
	}
	
	public ParserRule getCachePropertiesRule() {
		return getCachePropertiesAccess().getRule();
	}

	//enum RefType:
	//	STRONG="strong" | SOFT="soft" | WEAK="weak";
	public RefTypeElements getRefTypeAccess() {
		return (unknownRuleRefType != null) ? unknownRuleRefType : (unknownRuleRefType = new RefTypeElements());
	}
	
	public EnumRule getRefTypeRule() {
		return getRefTypeAccess().getRule();
	}

	//Plan:
	//	"plan" planId=ID after=AfterRule? "{" rules+=PrefetchingRule* "}";
	public PlanElements getPlanAccess() {
		return (pPlan != null) ? pPlan : (pPlan = new PlanElements());
	}
	
	public ParserRule getPlanRule() {
		return getPlanAccess().getRule();
	}

	//AfterRule:
	//	"after" planId=[Plan];
	public AfterRuleElements getAfterRuleAccess() {
		return (pAfterRule != null) ? pAfterRule : (pAfterRule = new AfterRuleElements());
	}
	
	public ParserRule getAfterRuleRule() {
		return getAfterRuleAccess().getRule();
	}

	//PrefetchingRule:
	//	moment=Moment sourcePattern=SourcePattern? "fetch" targetPattern=TargetPattern (probability=INT "%")? ("{"
	//	subRules+=PrefetchingRule* "}")?;
	public PrefetchingRuleElements getPrefetchingRuleAccess() {
		return (pPrefetchingRule != null) ? pPrefetchingRule : (pPrefetchingRule = new PrefetchingRuleElements());
	}
	
	public ParserRule getPrefetchingRuleRule() {
		return getPrefetchingRuleAccess().getRule();
	}

	//SourcePattern:
	//	pattern=QualifiedName filter=FilterPattern?;
	public SourcePatternElements getSourcePatternAccess() {
		return (pSourcePattern != null) ? pSourcePattern : (pSourcePattern = new SourcePatternElements());
	}
	
	public ParserRule getSourcePatternRule() {
		return getSourcePatternAccess().getRule();
	}

	//FilterPattern:
	//	"[" stringPattern=STRING "]";
	public FilterPatternElements getFilterPatternAccess() {
		return (pFilterPattern != null) ? pFilterPattern : (pFilterPattern = new FilterPatternElements());
	}
	
	public ParserRule getFilterPatternRule() {
		return getFilterPatternAccess().getRule();
	}

	//TargetPattern:
	//	pattern=QualifiedName filter=FilterPattern?;
	public TargetPatternElements getTargetPatternAccess() {
		return (pTargetPattern != null) ? pTargetPattern : (pTargetPattern = new TargetPatternElements());
	}
	
	public ParserRule getTargetPatternRule() {
		return getTargetPatternAccess().getRule();
	}

	//enum Moment:
	//	ON_STARTING="on starting" | ON_LOADING="on loading";
	public MomentElements getMomentAccess() {
		return (unknownRuleMoment != null) ? unknownRuleMoment : (unknownRuleMoment = new MomentElements());
	}
	
	public EnumRule getMomentRule() {
		return getMomentAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
