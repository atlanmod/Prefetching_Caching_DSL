/*
* generated by Xtext
*/
package fr.inria.atlanmod.neoemf.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class PrefetchingGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMetamodelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMetamodelMetamodelImportParserRuleCall_0_0 = (RuleCall)cMetamodelAssignment_0.eContents().get(0);
		private final Assignment cPlansAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPlansPlanParserRuleCall_1_0 = (RuleCall)cPlansAssignment_1.eContents().get(0);
		
		//Model:
		//	metamodel=MetamodelImport plans+=Plan*;
		public ParserRule getRule() { return rule; }

		//metamodel=MetamodelImport plans+=Plan*
		public Group getGroup() { return cGroup; }

		//metamodel=MetamodelImport
		public Assignment getMetamodelAssignment_0() { return cMetamodelAssignment_0; }

		//MetamodelImport
		public RuleCall getMetamodelMetamodelImportParserRuleCall_0_0() { return cMetamodelMetamodelImportParserRuleCall_0_0; }

		//plans+=Plan*
		public Assignment getPlansAssignment_1() { return cPlansAssignment_1; }

		//Plan
		public RuleCall getPlansPlanParserRuleCall_1_0() { return cPlansPlanParserRuleCall_1_0; }
	}

	public class MetamodelImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MetamodelImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNsURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNsURISTRINGTerminalRuleCall_1_0 = (RuleCall)cNsURIAssignment_1.eContents().get(0);
		
		//MetamodelImport:
		//	"import" nsURI=STRING;
		public ParserRule getRule() { return rule; }

		//"import" nsURI=STRING
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//nsURI=STRING
		public Assignment getNsURIAssignment_1() { return cNsURIAssignment_1; }

		//STRING
		public RuleCall getNsURISTRINGTerminalRuleCall_1_0() { return cNsURISTRINGTerminalRuleCall_1_0; }
	}

	public class CacheElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Cache");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUseCacheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeCacheTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cPropertiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertiesCachePropertiesParserRuleCall_2_0 = (RuleCall)cPropertiesAssignment_2.eContents().get(0);
		
		//Cache:
		//	"use cache" type=CacheType properties=CacheProperties?;
		public ParserRule getRule() { return rule; }

		//"use cache" type=CacheType properties=CacheProperties?
		public Group getGroup() { return cGroup; }

		//"use cache"
		public Keyword getUseCacheKeyword_0() { return cUseCacheKeyword_0; }

		//type=CacheType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//CacheType
		public RuleCall getTypeCacheTypeEnumRuleCall_1_0() { return cTypeCacheTypeEnumRuleCall_1_0; }

		//properties=CacheProperties?
		public Assignment getPropertiesAssignment_2() { return cPropertiesAssignment_2; }

		//CacheProperties
		public RuleCall getPropertiesCachePropertiesParserRuleCall_2_0() { return cPropertiesCachePropertiesParserRuleCall_2_0; }
	}

	public class CachePropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CacheProperties");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSizeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSizeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSizeINTTerminalRuleCall_2_0 = (RuleCall)cSizeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cChunkKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cChunkAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cChunkINTTerminalRuleCall_3_1_0 = (RuleCall)cChunkAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CacheProperties:
		//	"[" "size" size=INT ("chunk" chunk=INT)? "]";
		public ParserRule getRule() { return rule; }

		//"[" "size" size=INT ("chunk" chunk=INT)? "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//"size"
		public Keyword getSizeKeyword_1() { return cSizeKeyword_1; }

		//size=INT
		public Assignment getSizeAssignment_2() { return cSizeAssignment_2; }

		//INT
		public RuleCall getSizeINTTerminalRuleCall_2_0() { return cSizeINTTerminalRuleCall_2_0; }

		//("chunk" chunk=INT)?
		public Group getGroup_3() { return cGroup_3; }

		//"chunk"
		public Keyword getChunkKeyword_3_0() { return cChunkKeyword_3_0; }

		//chunk=INT
		public Assignment getChunkAssignment_3_1() { return cChunkAssignment_3_1; }

		//INT
		public RuleCall getChunkINTTerminalRuleCall_3_1_0() { return cChunkINTTerminalRuleCall_3_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class PlanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Plan");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlanKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cAfterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAfterAfterClauseParserRuleCall_2_0 = (RuleCall)cAfterAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCacheAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCacheCacheParserRuleCall_4_0 = (RuleCall)cCacheAssignment_4.eContents().get(0);
		private final Assignment cRulesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Alternatives cRulesAlternatives_5_0 = (Alternatives)cRulesAssignment_5.eContents().get(0);
		private final RuleCall cRulesStartingRuleParserRuleCall_5_0_0 = (RuleCall)cRulesAlternatives_5_0.eContents().get(0);
		private final RuleCall cRulesAccessRuleParserRuleCall_5_0_1 = (RuleCall)cRulesAlternatives_5_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Plan:
		//	"plan" name=ID after=AfterClause? "{" cache=Cache rules+=(StartingRule | AccessRule)* "}";
		public ParserRule getRule() { return rule; }

		//"plan" name=ID after=AfterClause? "{" cache=Cache rules+=(StartingRule | AccessRule)* "}"
		public Group getGroup() { return cGroup; }

		//"plan"
		public Keyword getPlanKeyword_0() { return cPlanKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//after=AfterClause?
		public Assignment getAfterAssignment_2() { return cAfterAssignment_2; }

		//AfterClause
		public RuleCall getAfterAfterClauseParserRuleCall_2_0() { return cAfterAfterClauseParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//cache=Cache
		public Assignment getCacheAssignment_4() { return cCacheAssignment_4; }

		//Cache
		public RuleCall getCacheCacheParserRuleCall_4_0() { return cCacheCacheParserRuleCall_4_0; }

		//rules+=(StartingRule | AccessRule)*
		public Assignment getRulesAssignment_5() { return cRulesAssignment_5; }

		//StartingRule | AccessRule
		public Alternatives getRulesAlternatives_5_0() { return cRulesAlternatives_5_0; }

		//StartingRule
		public RuleCall getRulesStartingRuleParserRuleCall_5_0_0() { return cRulesStartingRuleParserRuleCall_5_0_0; }

		//AccessRule
		public RuleCall getRulesAccessRuleParserRuleCall_5_0_1() { return cRulesAccessRuleParserRuleCall_5_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class AfterClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AfterClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAfterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPlanAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPlanPlanCrossReference_1_0 = (CrossReference)cPlanAssignment_1.eContents().get(0);
		private final RuleCall cPlanPlanIDTerminalRuleCall_1_0_1 = (RuleCall)cPlanPlanCrossReference_1_0.eContents().get(1);
		
		//AfterClause:
		//	"after" plan=[Plan];
		public ParserRule getRule() { return rule; }

		//"after" plan=[Plan]
		public Group getGroup() { return cGroup; }

		//"after"
		public Keyword getAfterKeyword_0() { return cAfterKeyword_0; }

		//plan=[Plan]
		public Assignment getPlanAssignment_1() { return cPlanAssignment_1; }

		//[Plan]
		public CrossReference getPlanPlanCrossReference_1_0() { return cPlanPlanCrossReference_1_0; }

		//ID
		public RuleCall getPlanPlanIDTerminalRuleCall_1_0_1() { return cPlanPlanIDTerminalRuleCall_1_0_1; }
	}

	public class StartingRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StartingRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cOnStartingKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cFetchKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTargetPatternAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTargetPatternTargetPatternParserRuleCall_5_0 = (RuleCall)cTargetPatternAssignment_5.eContents().get(0);
		
		//StartingRule:
		//	"rule" name=ID ":" "on starting" "fetch" targetPattern=TargetPattern;
		public ParserRule getRule() { return rule; }

		//"rule" name=ID ":" "on starting" "fetch" targetPattern=TargetPattern
		public Group getGroup() { return cGroup; }

		//"rule"
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//"on starting"
		public Keyword getOnStartingKeyword_3() { return cOnStartingKeyword_3; }

		//"fetch"
		public Keyword getFetchKeyword_4() { return cFetchKeyword_4; }

		//targetPattern=TargetPattern
		public Assignment getTargetPatternAssignment_5() { return cTargetPatternAssignment_5; }

		//TargetPattern
		public RuleCall getTargetPatternTargetPatternParserRuleCall_5_0() { return cTargetPatternTargetPatternParserRuleCall_5_0; }
	}

	public class AccessRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AccessRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cOnAccessKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSourcePatternAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSourcePatternSourcePatternParserRuleCall_4_0 = (RuleCall)cSourcePatternAssignment_4.eContents().get(0);
		private final Keyword cFetchKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTargetPatternAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTargetPatternTargetPatternParserRuleCall_6_0 = (RuleCall)cTargetPatternAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cRemoveKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cTypeKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cRemoveTypeAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cRemoveTypeClassPatternExpParserRuleCall_7_2_0 = (RuleCall)cRemoveTypeAssignment_7_2.eContents().get(0);
		
		//AccessRule:
		//	"rule" name=ID ":" "on access" sourcePattern=SourcePattern? "fetch" targetPattern=TargetPattern ("remove" "type"
		//	removeType=ClassPatternExp)?;
		public ParserRule getRule() { return rule; }

		//"rule" name=ID ":" "on access" sourcePattern=SourcePattern? "fetch" targetPattern=TargetPattern ("remove" "type"
		//removeType=ClassPatternExp)?
		public Group getGroup() { return cGroup; }

		//"rule"
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//"on access"
		public Keyword getOnAccessKeyword_3() { return cOnAccessKeyword_3; }

		//sourcePattern=SourcePattern?
		public Assignment getSourcePatternAssignment_4() { return cSourcePatternAssignment_4; }

		//SourcePattern
		public RuleCall getSourcePatternSourcePatternParserRuleCall_4_0() { return cSourcePatternSourcePatternParserRuleCall_4_0; }

		//"fetch"
		public Keyword getFetchKeyword_5() { return cFetchKeyword_5; }

		//targetPattern=TargetPattern
		public Assignment getTargetPatternAssignment_6() { return cTargetPatternAssignment_6; }

		//TargetPattern
		public RuleCall getTargetPatternTargetPatternParserRuleCall_6_0() { return cTargetPatternTargetPatternParserRuleCall_6_0; }

		//("remove" "type" removeType=ClassPatternExp)?
		public Group getGroup_7() { return cGroup_7; }

		//"remove"
		public Keyword getRemoveKeyword_7_0() { return cRemoveKeyword_7_0; }

		//"type"
		public Keyword getTypeKeyword_7_1() { return cTypeKeyword_7_1; }

		//removeType=ClassPatternExp
		public Assignment getRemoveTypeAssignment_7_2() { return cRemoveTypeAssignment_7_2; }

		//ClassPatternExp
		public RuleCall getRemoveTypeClassPatternExpParserRuleCall_7_2_0() { return cRemoveTypeClassPatternExpParserRuleCall_7_2_0; }
	}

	public class SourcePatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SourcePattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPatternAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPatternClassPatternExpParserRuleCall_1_0 = (RuleCall)cPatternAssignment_1.eContents().get(0);
		private final Assignment cFilterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFilterFilterPatternParserRuleCall_2_0 = (RuleCall)cFilterAssignment_2.eContents().get(0);
		
		//SourcePattern:
		//	"type" pattern=ClassPatternExp filter=FilterPattern?;
		public ParserRule getRule() { return rule; }

		//"type" pattern=ClassPatternExp filter=FilterPattern?
		public Group getGroup() { return cGroup; }

		//"type"
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }

		//pattern=ClassPatternExp
		public Assignment getPatternAssignment_1() { return cPatternAssignment_1; }

		//ClassPatternExp
		public RuleCall getPatternClassPatternExpParserRuleCall_1_0() { return cPatternClassPatternExpParserRuleCall_1_0; }

		//filter=FilterPattern?
		public Assignment getFilterAssignment_2() { return cFilterAssignment_2; }

		//FilterPattern
		public RuleCall getFilterFilterPatternParserRuleCall_2_0() { return cFilterFilterPatternParserRuleCall_2_0; }
	}

	public class FilterPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FilterPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStringPatternAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStringPatternSTRINGTerminalRuleCall_1_0 = (RuleCall)cStringPatternAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//FilterPattern:
		//	"[" stringPattern=STRING "]";
		public ParserRule getRule() { return rule; }

		//"[" stringPattern=STRING "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//stringPattern=STRING
		public Assignment getStringPatternAssignment_1() { return cStringPatternAssignment_1; }

		//STRING
		public RuleCall getStringPatternSTRINGTerminalRuleCall_1_0() { return cStringPatternSTRINGTerminalRuleCall_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class TargetPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TargetPattern");
		private final Assignment cPatternAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPatternPatternExp2ParserRuleCall_0 = (RuleCall)cPatternAssignment.eContents().get(0);
		
		//TargetPattern:
		//	pattern=PatternExp2;
		public ParserRule getRule() { return rule; }

		//pattern=PatternExp2
		public Assignment getPatternAssignment() { return cPatternAssignment; }

		//PatternExp2
		public RuleCall getPatternPatternExp2ParserRuleCall_0() { return cPatternPatternExp2ParserRuleCall_0; }
	}

	public class PatternExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PatternExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cAsteriskKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//PatternExp:
		//	ID ("." ID "*"?)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID "*"?)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID "*"?)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }

		//"*"?
		public Keyword getAsteriskKeyword_1_2() { return cAsteriskKeyword_1_2; }
	}

	public class PatternExp2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PatternExp2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1_0_0 = (RuleCall)cGroup_1_1_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1_0_1 = (Keyword)cGroup_1_1_0.eContents().get(1);
		private final Group cGroup_1_1_1 = (Group)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_1_1_0 = (RuleCall)cGroup_1_1_1.eContents().get(0);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_1_1_1_1 = (Keyword)cGroup_1_1_1.eContents().get(1);
		
		//PatternExp2:
		//	ID ("." (ID "*" | ID "()"?))*;
		public ParserRule getRule() { return rule; }

		//ID ("." (ID "*" | ID "()"?))*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." (ID "*" | ID "()"?))*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID "*" | ID "()"?
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//ID "*"
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1_0_0() { return cIDTerminalRuleCall_1_1_0_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_1_0_1() { return cAsteriskKeyword_1_1_0_1; }

		//ID "()"?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1_1_0() { return cIDTerminalRuleCall_1_1_1_0; }

		//"()"?
		public Keyword getLeftParenthesisRightParenthesisKeyword_1_1_1_1() { return cLeftParenthesisRightParenthesisKeyword_1_1_1_1; }
	}

	public class ClassPatternExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassPatternExp");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ClassPatternExp:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	public class CacheTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "CacheType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLRUEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLRULRUKeyword_0_0 = (Keyword)cLRUEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPREDICTIVEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPREDICTIVEPredictiveKeyword_1_0 = (Keyword)cPREDICTIVEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum CacheType:
		//	LRU | PREDICTIVE="Predictive";
		public EnumRule getRule() { return rule; }

		//LRU | PREDICTIVE="Predictive"
		public Alternatives getAlternatives() { return cAlternatives; }

		//LRU
		public EnumLiteralDeclaration getLRUEnumLiteralDeclaration_0() { return cLRUEnumLiteralDeclaration_0; }

		//"LRU"
		public Keyword getLRULRUKeyword_0_0() { return cLRULRUKeyword_0_0; }

		//PREDICTIVE="Predictive"
		public EnumLiteralDeclaration getPREDICTIVEEnumLiteralDeclaration_1() { return cPREDICTIVEEnumLiteralDeclaration_1; }

		//"Predictive"
		public Keyword getPREDICTIVEPredictiveKeyword_1_0() { return cPREDICTIVEPredictiveKeyword_1_0; }
	}

	public class RefTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "RefType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSTRONGEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSTRONGStrongKeyword_0_0 = (Keyword)cSTRONGEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSOFTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSOFTSoftKeyword_1_0 = (Keyword)cSOFTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cWEAKEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cWEAKWeakKeyword_2_0 = (Keyword)cWEAKEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum RefType:
		//	STRONG="strong" | SOFT="soft" | WEAK="weak";
		public EnumRule getRule() { return rule; }

		//STRONG="strong" | SOFT="soft" | WEAK="weak"
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRONG="strong"
		public EnumLiteralDeclaration getSTRONGEnumLiteralDeclaration_0() { return cSTRONGEnumLiteralDeclaration_0; }

		//"strong"
		public Keyword getSTRONGStrongKeyword_0_0() { return cSTRONGStrongKeyword_0_0; }

		//SOFT="soft"
		public EnumLiteralDeclaration getSOFTEnumLiteralDeclaration_1() { return cSOFTEnumLiteralDeclaration_1; }

		//"soft"
		public Keyword getSOFTSoftKeyword_1_0() { return cSOFTSoftKeyword_1_0; }

		//WEAK="weak"
		public EnumLiteralDeclaration getWEAKEnumLiteralDeclaration_2() { return cWEAKEnumLiteralDeclaration_2; }

		//"weak"
		public Keyword getWEAKWeakKeyword_2_0() { return cWEAKWeakKeyword_2_0; }
	}
	
	private ModelElements pModel;
	private MetamodelImportElements pMetamodelImport;
	private CacheElements pCache;
	private CacheTypeElements unknownRuleCacheType;
	private CachePropertiesElements pCacheProperties;
	private RefTypeElements unknownRuleRefType;
	private PlanElements pPlan;
	private AfterClauseElements pAfterClause;
	private StartingRuleElements pStartingRule;
	private AccessRuleElements pAccessRule;
	private SourcePatternElements pSourcePattern;
	private FilterPatternElements pFilterPattern;
	private TargetPatternElements pTargetPattern;
	private PatternExpElements pPatternExp;
	private PatternExp2Elements pPatternExp2;
	private ClassPatternExpElements pClassPatternExp;
	private QualifiedNameElements pQualifiedName;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public PrefetchingGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.inria.atlanmod.neoemf.Prefetching".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	metamodel=MetamodelImport plans+=Plan*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//MetamodelImport:
	//	"import" nsURI=STRING;
	public MetamodelImportElements getMetamodelImportAccess() {
		return (pMetamodelImport != null) ? pMetamodelImport : (pMetamodelImport = new MetamodelImportElements());
	}
	
	public ParserRule getMetamodelImportRule() {
		return getMetamodelImportAccess().getRule();
	}

	//Cache:
	//	"use cache" type=CacheType properties=CacheProperties?;
	public CacheElements getCacheAccess() {
		return (pCache != null) ? pCache : (pCache = new CacheElements());
	}
	
	public ParserRule getCacheRule() {
		return getCacheAccess().getRule();
	}

	//enum CacheType:
	//	LRU | PREDICTIVE="Predictive";
	public CacheTypeElements getCacheTypeAccess() {
		return (unknownRuleCacheType != null) ? unknownRuleCacheType : (unknownRuleCacheType = new CacheTypeElements());
	}
	
	public EnumRule getCacheTypeRule() {
		return getCacheTypeAccess().getRule();
	}

	//CacheProperties:
	//	"[" "size" size=INT ("chunk" chunk=INT)? "]";
	public CachePropertiesElements getCachePropertiesAccess() {
		return (pCacheProperties != null) ? pCacheProperties : (pCacheProperties = new CachePropertiesElements());
	}
	
	public ParserRule getCachePropertiesRule() {
		return getCachePropertiesAccess().getRule();
	}

	//enum RefType:
	//	STRONG="strong" | SOFT="soft" | WEAK="weak";
	public RefTypeElements getRefTypeAccess() {
		return (unknownRuleRefType != null) ? unknownRuleRefType : (unknownRuleRefType = new RefTypeElements());
	}
	
	public EnumRule getRefTypeRule() {
		return getRefTypeAccess().getRule();
	}

	//Plan:
	//	"plan" name=ID after=AfterClause? "{" cache=Cache rules+=(StartingRule | AccessRule)* "}";
	public PlanElements getPlanAccess() {
		return (pPlan != null) ? pPlan : (pPlan = new PlanElements());
	}
	
	public ParserRule getPlanRule() {
		return getPlanAccess().getRule();
	}

	//AfterClause:
	//	"after" plan=[Plan];
	public AfterClauseElements getAfterClauseAccess() {
		return (pAfterClause != null) ? pAfterClause : (pAfterClause = new AfterClauseElements());
	}
	
	public ParserRule getAfterClauseRule() {
		return getAfterClauseAccess().getRule();
	}

	//StartingRule:
	//	"rule" name=ID ":" "on starting" "fetch" targetPattern=TargetPattern;
	public StartingRuleElements getStartingRuleAccess() {
		return (pStartingRule != null) ? pStartingRule : (pStartingRule = new StartingRuleElements());
	}
	
	public ParserRule getStartingRuleRule() {
		return getStartingRuleAccess().getRule();
	}

	//AccessRule:
	//	"rule" name=ID ":" "on access" sourcePattern=SourcePattern? "fetch" targetPattern=TargetPattern ("remove" "type"
	//	removeType=ClassPatternExp)?;
	public AccessRuleElements getAccessRuleAccess() {
		return (pAccessRule != null) ? pAccessRule : (pAccessRule = new AccessRuleElements());
	}
	
	public ParserRule getAccessRuleRule() {
		return getAccessRuleAccess().getRule();
	}

	//SourcePattern:
	//	"type" pattern=ClassPatternExp filter=FilterPattern?;
	public SourcePatternElements getSourcePatternAccess() {
		return (pSourcePattern != null) ? pSourcePattern : (pSourcePattern = new SourcePatternElements());
	}
	
	public ParserRule getSourcePatternRule() {
		return getSourcePatternAccess().getRule();
	}

	//FilterPattern:
	//	"[" stringPattern=STRING "]";
	public FilterPatternElements getFilterPatternAccess() {
		return (pFilterPattern != null) ? pFilterPattern : (pFilterPattern = new FilterPatternElements());
	}
	
	public ParserRule getFilterPatternRule() {
		return getFilterPatternAccess().getRule();
	}

	//TargetPattern:
	//	pattern=PatternExp2;
	public TargetPatternElements getTargetPatternAccess() {
		return (pTargetPattern != null) ? pTargetPattern : (pTargetPattern = new TargetPatternElements());
	}
	
	public ParserRule getTargetPatternRule() {
		return getTargetPatternAccess().getRule();
	}

	//PatternExp:
	//	ID ("." ID "*"?)*;
	public PatternExpElements getPatternExpAccess() {
		return (pPatternExp != null) ? pPatternExp : (pPatternExp = new PatternExpElements());
	}
	
	public ParserRule getPatternExpRule() {
		return getPatternExpAccess().getRule();
	}

	//PatternExp2:
	//	ID ("." (ID "*" | ID "()"?))*;
	public PatternExp2Elements getPatternExp2Access() {
		return (pPatternExp2 != null) ? pPatternExp2 : (pPatternExp2 = new PatternExp2Elements());
	}
	
	public ParserRule getPatternExp2Rule() {
		return getPatternExp2Access().getRule();
	}

	//ClassPatternExp:
	//	ID;
	public ClassPatternExpElements getClassPatternExpAccess() {
		return (pClassPatternExp != null) ? pClassPatternExp : (pClassPatternExp = new ClassPatternExpElements());
	}
	
	public ParserRule getClassPatternExpRule() {
		return getClassPatternExpAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
