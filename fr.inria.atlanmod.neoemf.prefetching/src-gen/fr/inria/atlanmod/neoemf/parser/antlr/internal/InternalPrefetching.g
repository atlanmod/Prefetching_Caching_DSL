/*
* generated by Xtext
*/
grammar InternalPrefetching;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package fr.inria.atlanmod.neoemf.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.inria.atlanmod.neoemf.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.inria.atlanmod.neoemf.services.PrefetchingGrammarAccess;

}

@parser::members {

 	private PrefetchingGrammarAccess grammarAccess;
 	
    public InternalPrefetchingParser(TokenStream input, PrefetchingGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected PrefetchingGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getMetamodelMetamodelImportParserRuleCall_0_0()); 
	    }
		lv_metamodel_0_0=ruleMetamodelImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"metamodel",
        		lv_metamodel_0_0, 
        		"MetamodelImport");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getCacheCacheParserRuleCall_1_0()); 
	    }
		lv_cache_1_0=ruleCache		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"cache",
        		lv_cache_1_0, 
        		"Cache");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getPlansPlanParserRuleCall_2_0()); 
	    }
		lv_plans_2_0=rulePlan		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"plans",
        		lv_plans_2_0, 
        		"Plan");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleMetamodelImport
entryRuleMetamodelImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMetamodelImportRule()); }
	 iv_ruleMetamodelImport=ruleMetamodelImport 
	 { $current=$iv_ruleMetamodelImport.current; } 
	 EOF 
;

// Rule MetamodelImport
ruleMetamodelImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMetamodelImportAccess().getImportKeyword_0());
    }
(
(
		lv_nsURI_1_0=RULE_STRING
		{
			newLeafNode(lv_nsURI_1_0, grammarAccess.getMetamodelImportAccess().getNsURISTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMetamodelImportRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"nsURI",
        		lv_nsURI_1_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleCache
entryRuleCache returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCacheRule()); }
	 iv_ruleCache=ruleCache 
	 { $current=$iv_ruleCache.current; } 
	 EOF 
;

// Rule Cache
ruleCache returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='use cache' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCacheAccess().getUseCacheKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCacheAccess().getTypeCacheTypeEnumRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleCacheType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCacheRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"CacheType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCacheAccess().getPropertiesCachePropertiesParserRuleCall_2_0()); 
	    }
		lv_properties_2_0=ruleCacheProperties		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCacheRule());
	        }
       		set(
       			$current, 
       			"properties",
        		lv_properties_2_0, 
        		"CacheProperties");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleCacheProperties
entryRuleCacheProperties returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCachePropertiesRule()); }
	 iv_ruleCacheProperties=ruleCacheProperties 
	 { $current=$iv_ruleCacheProperties.current; } 
	 EOF 
;

// Rule CacheProperties
ruleCacheProperties returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCachePropertiesAccess().getLeftSquareBracketKeyword_0());
    }
	otherlv_1='size' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCachePropertiesAccess().getSizeKeyword_1());
    }
(
(
		lv_size_2_0=RULE_INT
		{
			newLeafNode(lv_size_2_0, grammarAccess.getCachePropertiesAccess().getSizeINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCachePropertiesRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"size",
        		lv_size_2_0, 
        		"INT");
	    }

)
)	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCachePropertiesAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRulePlan
entryRulePlan returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPlanRule()); }
	 iv_rulePlan=rulePlan 
	 { $current=$iv_rulePlan.current; } 
	 EOF 
;

// Rule Plan
rulePlan returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='plan' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPlanAccess().getPlanKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getPlanAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPlanRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPlanAccess().getAfterAfterClauseParserRuleCall_2_0()); 
	    }
		lv_after_2_0=ruleAfterClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlanRule());
	        }
       		set(
       			$current, 
       			"after",
        		lv_after_2_0, 
        		"AfterClause");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPlanAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getPlanAccess().getRulesStartingRuleParserRuleCall_4_0_0()); 
	    }
		lv_rules_4_1=ruleStartingRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlanRule());
	        }
       		add(
       			$current, 
       			"rules",
        		lv_rules_4_1, 
        		"StartingRule");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getPlanAccess().getRulesLoadingRuleParserRuleCall_4_0_1()); 
	    }
		lv_rules_4_2=ruleLoadingRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlanRule());
	        }
       		add(
       			$current, 
       			"rules",
        		lv_rules_4_2, 
        		"LoadingRule");
	        afterParserOrEnumRuleCall();
	    }

)

)
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPlanAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleAfterClause
entryRuleAfterClause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAfterClauseRule()); }
	 iv_ruleAfterClause=ruleAfterClause 
	 { $current=$iv_ruleAfterClause.current; } 
	 EOF 
;

// Rule AfterClause
ruleAfterClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='after' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAfterClauseAccess().getAfterKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAfterClauseRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getAfterClauseAccess().getPlanPlanCrossReference_1_0()); 
	}

)
))
;





// Entry rule entryRuleStartingRule
entryRuleStartingRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStartingRuleRule()); }
	 iv_ruleStartingRule=ruleStartingRule 
	 { $current=$iv_ruleStartingRule.current; } 
	 EOF 
;

// Rule StartingRule
ruleStartingRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='on starting' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStartingRuleAccess().getOnStartingKeyword_0());
    }
	otherlv_1='fetch' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStartingRuleAccess().getFetchKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStartingRuleAccess().getTargetPatternTargetPatternParserRuleCall_2_0()); 
	    }
		lv_targetPattern_2_0=ruleTargetPattern		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStartingRuleRule());
	        }
       		set(
       			$current, 
       			"targetPattern",
        		lv_targetPattern_2_0, 
        		"TargetPattern");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_probability_3_0=RULE_INT
		{
			newLeafNode(lv_probability_3_0, grammarAccess.getStartingRuleAccess().getProbabilityINTTerminalRuleCall_3_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStartingRuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"probability",
        		lv_probability_3_0, 
        		"INT");
	    }

)
)	otherlv_4='%' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStartingRuleAccess().getPercentSignKeyword_3_1());
    }
)?(	otherlv_5='{' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getStartingRuleAccess().getLeftCurlyBracketKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStartingRuleAccess().getSubRulesLoadingRuleParserRuleCall_4_1_0()); 
	    }
		lv_subRules_6_0=ruleLoadingRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStartingRuleRule());
	        }
       		add(
       			$current, 
       			"subRules",
        		lv_subRules_6_0, 
        		"LoadingRule");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getStartingRuleAccess().getRightCurlyBracketKeyword_4_2());
    }
))
;





// Entry rule entryRuleLoadingRule
entryRuleLoadingRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLoadingRuleRule()); }
	 iv_ruleLoadingRule=ruleLoadingRule 
	 { $current=$iv_ruleLoadingRule.current; } 
	 EOF 
;

// Rule LoadingRule
ruleLoadingRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='on loading' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLoadingRuleAccess().getOnLoadingKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLoadingRuleAccess().getSourcePatternSourcePatternParserRuleCall_1_0()); 
	    }
		lv_sourcePattern_1_0=ruleSourcePattern		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoadingRuleRule());
	        }
       		set(
       			$current, 
       			"sourcePattern",
        		lv_sourcePattern_1_0, 
        		"SourcePattern");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_2='fetch' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLoadingRuleAccess().getFetchKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLoadingRuleAccess().getTargetPatternTargetPatternParserRuleCall_3_0()); 
	    }
		lv_targetPattern_3_0=ruleTargetPattern		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoadingRuleRule());
	        }
       		set(
       			$current, 
       			"targetPattern",
        		lv_targetPattern_3_0, 
        		"TargetPattern");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_probability_4_0=RULE_INT
		{
			newLeafNode(lv_probability_4_0, grammarAccess.getLoadingRuleAccess().getProbabilityINTTerminalRuleCall_4_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLoadingRuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"probability",
        		lv_probability_4_0, 
        		"INT");
	    }

)
)	otherlv_5='%' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getLoadingRuleAccess().getPercentSignKeyword_4_1());
    }
)?(	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getLoadingRuleAccess().getLeftCurlyBracketKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLoadingRuleAccess().getSubRulesLoadingRuleParserRuleCall_5_1_0()); 
	    }
		lv_subRules_7_0=ruleLoadingRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoadingRuleRule());
	        }
       		add(
       			$current, 
       			"subRules",
        		lv_subRules_7_0, 
        		"LoadingRule");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getLoadingRuleAccess().getRightCurlyBracketKeyword_5_2());
    }
)?)
;





// Entry rule entryRuleSourcePattern
entryRuleSourcePattern returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSourcePatternRule()); }
	 iv_ruleSourcePattern=ruleSourcePattern 
	 { $current=$iv_ruleSourcePattern.current; } 
	 EOF 
;

// Rule SourcePattern
ruleSourcePattern returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSourcePatternAccess().getPatternPatternExpParserRuleCall_0_0()); 
	    }
		lv_pattern_0_0=rulePatternExp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSourcePatternRule());
	        }
       		set(
       			$current, 
       			"pattern",
        		lv_pattern_0_0, 
        		"PatternExp");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSourcePatternAccess().getFilterFilterPatternParserRuleCall_1_0()); 
	    }
		lv_filter_1_0=ruleFilterPattern		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSourcePatternRule());
	        }
       		set(
       			$current, 
       			"filter",
        		lv_filter_1_0, 
        		"FilterPattern");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleFilterPattern
entryRuleFilterPattern returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFilterPatternRule()); }
	 iv_ruleFilterPattern=ruleFilterPattern 
	 { $current=$iv_ruleFilterPattern.current; } 
	 EOF 
;

// Rule FilterPattern
ruleFilterPattern returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFilterPatternAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		lv_stringPattern_1_0=RULE_STRING
		{
			newLeafNode(lv_stringPattern_1_0, grammarAccess.getFilterPatternAccess().getStringPatternSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFilterPatternRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"stringPattern",
        		lv_stringPattern_1_0, 
        		"STRING");
	    }

)
)	otherlv_2=']' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFilterPatternAccess().getRightSquareBracketKeyword_2());
    }
)
;





// Entry rule entryRuleTargetPattern
entryRuleTargetPattern returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTargetPatternRule()); }
	 iv_ruleTargetPattern=ruleTargetPattern 
	 { $current=$iv_ruleTargetPattern.current; } 
	 EOF 
;

// Rule TargetPattern
ruleTargetPattern returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTargetPatternAccess().getPatternPatternExpParserRuleCall_0_0()); 
	    }
		lv_pattern_0_0=rulePatternExp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTargetPatternRule());
	        }
       		set(
       			$current, 
       			"pattern",
        		lv_pattern_0_0, 
        		"PatternExp");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTargetPatternAccess().getFilterFilterPatternParserRuleCall_1_0()); 
	    }
		lv_filter_1_0=ruleFilterPattern		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTargetPatternRule());
	        }
       		set(
       			$current, 
       			"filter",
        		lv_filter_1_0, 
        		"FilterPattern");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRulePatternExp
entryRulePatternExp returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPatternExpRule()); } 
	 iv_rulePatternExp=rulePatternExp 
	 { $current=$iv_rulePatternExp.current.getText(); }  
	 EOF 
;

// Rule PatternExp
rulePatternExp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getPatternExpAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPatternExpAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getPatternExpAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;







// Rule CacheType
ruleCacheType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='LRU' 
	{
        $current = grammarAccess.getCacheTypeAccess().getLRUEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getCacheTypeAccess().getLRUEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='Predictive' 
	{
        $current = grammarAccess.getCacheTypeAccess().getPREDICTIVEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getCacheTypeAccess().getPREDICTIVEEnumLiteralDeclaration_1()); 
    }
));







RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


